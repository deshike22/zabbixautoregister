

# Flexible parameter to grab global variables. On the frontend side, use keys like mysql.status[Com_insert].
# Key syntax is mysql.status[variable].
UserParameter=mysql.status[*],echo "show global status where Variable_name='$1';" | HOME=/var/lib/zabbix mysql -N | awk '{print $$2}'

# Flexible parameter to determine database or table size. On the frontend side, use keys like mysql.size[zabbix,history,data].
# Key syntax is mysql.size[<database>,<table>,<type>].
# Database may be a database name or "all". Default is "all".
# Table may be a table name or "all". Default is "all".
# Type may be "data", "index", "free" or "both". Both is a sum of data and index. Default is "both".
# Database is mandatory if a table is specified. Type may be specified always.
# Returns value in bytes.
# 'sum' on data_length or index_length alone needed when we are getting this information for whole database instead of a single table
UserParameter=mysql.size[*],bash -c 'echo "select sum($(case "$3" in both|"") echo "data_length+index_length";; data|index) echo "$3_length";; free) echo "data_free";; esac)) from information_schema.tables$([[ "$1" = "all" || ! "$1" ]] || echo " where table_schema=\"$1\"")$([[ "$2" = "all" || ! "$2" ]] || echo "and table_name=\"$2\"");" | HOME=/var/lib/zabbix mysql -N'

UserParameter=mysql.ping,HOME=/var/lib/zabbix mysqladmin ping | grep -c alive
UserParameter=mysql.version,mysql -V


# TCP ports listening on both ipv4 and ipv6
UserParameter=tcpport.discovery,for ports in $(netstat -lnt | awk 'NR>2{print $4}' | sed 's/.*://' | sort -n | uniq); do portlist="$portlist,"'{"{#TCPPORT}":"'$ports'"}'; done;echo '{"data":['${portlist#,}']}'

# Certificate discovery by location
UserParameter=certlocation.discovery[*],for location in $(for i in `echo $1|sed "s/,/ /g"`;do find $i -type f -name *.$2 2> /dev/null;done);do locationlist="$locationlist,"'{"{#CERTFILE}":"'$location'"}';done;echo '{"data":['${locationlist#,}']}'

# Certificate expiration time in seconds based on the certificate file provided. This is for Linux based OS only.
UserParameter=certexp[*],echo $(($(date -d "`(openssl x509 -inform PEM -in $1 -enddate -noout 2>/dev/null || openssl x509 -inform DER -in $1 -enddate -noout 2>/dev/null || openssl x509 -in $1 -enddate -noout 2>/dev/null)|cut -d = -f 2`" +%s)-$(date +%s)))

# Certificate expiration time in seconds based on the certificate file provided. This is for AIX and Solaris as data -d function may not work and it requires 
UserParameter=certexpother[*],echo $(/home/auZabbixAgentdsa/software/zabbix/scripts/toepoch.sh "`(openssl x509 -inform PEM -in $1 -enddate -noout 2>/dev/null || openssl x509 -inform DER -in $1 -enddate -noout 2>/dev/null || openssl x509 -in $1 -enddate -noout 2>/dev/null)|cut -d = -f 2`")

# Emulating built-in agent parameter 'system.users.num'
UserParameter=system.test,who | wc -l

# Get size of a directory
# Defaults to /tmp
# UserParameter=vfs.dir.size[*],dir="$1"; du -s -B 1 "${dir:-/tmp}" | cut -f1

# Discovering the processes
UserParameter=process.discovery,echo "{ \"data\":[" ; ps caux | awk 'NR>1{ print " { \"{#PSUSER}\":\"" $1 "\", \"{#PSNAME}\":\"" $11 "\" },"}' | sort | uniq | sed -e 's/\//\\\//g' -e '$s/.$//' ; echo " ]}"

# Total CPU utilisation by all processes with a given name.
# Returns empty value if no such processes are present, numeric items will turn unsupported
# Defaults to zabbix_agentd
UserParameter=proc.cpu[*],proc="$1"; ps -o pcpu= -C "${proc:-zabbix_agentd}" | awk '{sum += $$1} END {print sum}'

# Mail queue length from mailq
UserParameter=unix_mail.queue,mailq | grep -v "Mail queue is empty" | grep -c '^[0-9A-Z]'

# Partition discovery on Linux
UserParameter=vfs.partitions.discovery.linux,for partition in $(awk 'NR > 2 {print $4}' /proc/partitions); do partitionlist="$partitionlist,"'{"{#PARTITION}":"'$partition'"}'; done; echo '{"data":['${partitionlist#,}']}'

# Partition discovery on Solaris (using iostat output)
# On Solaris bash usually is not the one linked from /bin/sh, so a wrapper script is suggested
UserParameter=vfs.partitions.discovery.solaris,/somewhere/solaris_partitions.sh
# Wrapper script (solaris_partitions.sh) contents:
##!/bin/bash
#for partition in $(iostat -x | tail +3 | awk '{print $1}'); do
#  partitionlist="$partitionlist,"'{"{#PARTITION}":"'$partition'"}'
#done
#echo '{"data":['${partitionlist#,}']}'
